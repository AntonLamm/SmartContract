// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyNFT is ERC721Enumerable, Ownable {
    using SafeMath for uint256;

    // Base URI for metadata
    string private _baseTokenURI;

    // Current token ID
    uint256 private _currentTokenId = 0;

    // Max number of tokens that can be minted
    uint256 private _maxTokens;

    // Flag to enable/disable minting
    bool private _mintingEnabled = true;

    constructor(string memory name, string memory symbol, string memory baseTokenURI, uint256 maxTokens) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;
        _maxTokens = maxTokens;
    }

    // Minting function
    function mint() external {
        require(_mintingEnabled, "Minting is not currently enabled");
        require(_currentTokenId < _maxTokens, "Exceeded the maximum number of tokens");

        uint256 newTokenId = _getNextTokenId();
        _safeMint(msg.sender, newTokenId);
        _incrementTokenId();
    }

    // Internal function to get the next token ID
    function _getNextTokenId() internal view returns (uint256) {
        return _currentTokenId.add(1);
    }

    // Internal function to increment the token ID
    function _incrementTokenId() internal {
        _currentTokenId = _currentTokenId.add(1);
    }

    // Enable or disable minting (only owner)
    function setMintingEnabled(bool enabled) external onlyOwner {
        _mintingEnabled = enabled;
    }

    // Set the base URI for metadata (only owner)
    function setBaseTokenURI(string memory baseTokenURI) external onlyOwner {
        _baseTokenURI = baseTokenURI;
    }

    // Override the base function to return the full URI for a token
    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "Token does not exist");
        return string(abi.encodePacked(_baseTokenURI, tokenId.toString()));
    }
}
